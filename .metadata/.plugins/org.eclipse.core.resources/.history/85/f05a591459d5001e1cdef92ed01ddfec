package com.banking.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

import com.banking.model.Account;
import com.banking.model.Transaction;
import com.banking.utils.CustomException;
import com.banking.utils.DatabaseConnection;
import com.banking.utils.ErrorMessages;
import com.banking.utils.InputValidator;

public class TransactionDaoImplementation implements TransactionDao {

	private static final String UPDATE_QUERY = "UPDATE Accounts SET balance = ? WHERE account_number = ?;";
	private static final String TRANSACTION_LOG = "INSERT INTO Transaction (user_id, viewer_account_number, transacted_account_number, "
			+ "transaction_type, transaction_amount, balance, transaction_date, remark, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);";
	private static final String GET_STATEMENT = "SELECT transaction_date, transaction_type,transaction_amount, balance FROM Transaction "
			+ "WHERE viewer_account_number = ? AND status = 'Success' AND transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL ? MONTH) "
			+ "order by transaction_date DESC";
	private static final String GET_TRANSACTION_HISTORY = "SELECT t.transaction_id,t.viewer_account_number,t.transacted_account_number,t.transaction_type,t.transaction_amount,t.balance,t. transaction_date,t.remark,t.status \n"
			+ "FROM Transaction t INNER JOIN Accounts a on t.viewer_account_number = a.account_number WHERE a.user_id = ?;";

	@Override
	public boolean deposit(Account selectedAccount, double amountToDeposite) throws CustomException {
		InputValidator.isNull(selectedAccount, ErrorMessages.INPUT_NULL_MESSAGE);
		boolean isAmountDepositedAndLoggedInTransaction = false;
		try (Connection connection = DatabaseConnection.getConnection();
				PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_QUERY)) {

			double newBalance = selectedAccount.getBalance() + amountToDeposite;

			preparedStatement.setDouble(1, newBalance);
			preparedStatement.setString(2, selectedAccount.getAccountNumber());

			int rowsAffected = preparedStatement.executeUpdate();
			if (rowsAffected > 0) {
				selectedAccount.setBalance(newBalance);
				isAmountDepositedAndLoggedInTransaction = logTransaction(selectedAccount, selectedAccount,
						amountToDeposite, "Deposite");
			}
		} catch (SQLException | ClassNotFoundException e) {
			throw new CustomException("Error While Depositing Money", e);
		}
		return isAmountDepositedAndLoggedInTransaction;
	}

	@Override
	public boolean withdraw(Account selectedAccount, double amountToWithdraw) throws CustomException {
		InputValidator.isNull(selectedAccount, ErrorMessages.INPUT_NULL_MESSAGE);
		boolean isAmountWithdrawedAndLoggedInTransaction = false;
		try (Connection connection = DatabaseConnection.getConnection();
				PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_QUERY)) {

			double newBalance = selectedAccount.getBalance() - amountToWithdraw;

			preparedStatement.setDouble(1, newBalance);
			preparedStatement.setString(2, selectedAccount.getAccountNumber());

			int rowsAffected = preparedStatement.executeUpdate();
			if (rowsAffected > 0) {
				selectedAccount.setBalance(newBalance);
				isAmountWithdrawedAndLoggedInTransaction = logTransaction(selectedAccount, selectedAccount,
						amountToWithdraw, "Withdraw");
			}
		} catch (SQLException | ClassNotFoundException e) {
			throw new CustomException("Error While Depositing Money", e);
		}
		return isAmountWithdrawedAndLoggedInTransaction;
	}

	@Override
	public boolean transferMoneyWithinBank(Account accountFromTransfer, Account accountToTransfer,
			double amountToTransfer) throws CustomException {
		InputValidator.isNull(accountFromTransfer, ErrorMessages.INPUT_NULL_MESSAGE);
		InputValidator.isNull(accountToTransfer, ErrorMessages.INPUT_NULL_MESSAGE);
		if (accountFromTransfer.getBalance() < amountToTransfer) {
			throw new CustomException("Insufficient Balance");
		}
		boolean isTransferSuccess = false;
		try (Connection connection = DatabaseConnection.getConnection()) {
			connection.setAutoCommit(false);

			double newBalanceOfToAccount = accountToTransfer.getBalance() + amountToTransfer;

			if (withdraw(accountFromTransfer, amountToTransfer)) {
				try (PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_QUERY)) {
					preparedStatement.setDouble(1, newBalanceOfToAccount);
					preparedStatement.setString(2, accountToTransfer.getAccountNumber());

					int rowAffected = preparedStatement.executeUpdate();

					if (rowAffected > 0) {
						accountToTransfer.setBalance(newBalanceOfToAccount);
						boolean isDepositLogged = logTransaction(accountToTransfer, accountFromTransfer,
								amountToTransfer, "Deposit");

						if (isDepositLogged) {
							isTransferSuccess = true;
							connection.commit();
						} else {
							connection.rollback();
						}
					}
				}

			}
		} catch (SQLException | ClassNotFoundException e) {
			throw new CustomException("Error While Depositing Money", e);
		}
		return isTransferSuccess;
	}

	@Override
	public boolean transferMoneyWithOtherBank(Account accountFromTransfer, String accountNumberToTransfer,
			double amountToTransferWithOtherBank) throws CustomException {
		InputValidator.isNull(accountFromTransfer, ErrorMessages.INPUT_NULL_MESSAGE);
		InputValidator.isNull(accountNumberToTransfer, ErrorMessages.INPUT_NULL_MESSAGE);
		if (accountFromTransfer.getBalance() < amountToTransferWithOtherBank) {
			throw new CustomException("Insufficient Balance");
		}
		boolean isTransferSuccess = false;
		isTransferSuccess = withdraw(accountFromTransfer, amountToTransferWithOtherBank);
		return isTransferSuccess;
	}

	@Override
	public List<Transaction> getUsersStatement(Account account, int numberOfMonths) throws CustomException {
		InputValidator.isNull(account, ErrorMessages.INPUT_NULL_MESSAGE);
		List<Transaction> statements = null;
		try (Connection connection = DatabaseConnection.getConnection();
				PreparedStatement preparedStatement = connection.prepareStatement(GET_STATEMENT)) {

			preparedStatement.setString(1, account.getAccountNumber());
			preparedStatement.setInt(2, numberOfMonths);
			try (ResultSet resultSet = preparedStatement.executeQuery()) {
				statements = new ArrayList<Transaction>();
				getStatementDetails(resultSet, statements);
			}
		} catch (SQLException | ClassNotFoundException e) {
			throw new CustomException("Error While Reterving Transaction!!!", e);
		}
		return statements;
	}

	@Override
	public List<Transaction> getCustomerTransactionHistory(int userIdToGetTransaction) throws CustomException {
		List<Transaction> historyList = null;
		try (Connection connection = DatabaseConnection.getConnection();
				PreparedStatement preparedStatement = connection.prepareStatement(GET_TRANSACTION_HISTORY)) {

			preparedStatement.setInt(1, userIdToGetTransaction);
			try (ResultSet resultSet = preparedStatement.executeQuery()) {
				historyList = new ArrayList<Transaction>();
				getCustomerTransactionHistoryDetail(resultSet,historyList);
			}
		} catch (SQLException | ClassNotFoundException e) {
			throw new CustomException("Error While Reterving Transaction!!!", e);
		}
		return historyList;
	}

	private void getCustomerTransactionHistoryDetail(ResultSet resultSet, List<Transaction> historyList) throws SQLException {
		Transaction transaction;
		while(resultSet.next()) {
			transaction = new Transaction();
			
		}
	}

	private void getStatementDetails(ResultSet resultSet, List<Transaction> statements) throws SQLException {
		Transaction transaction;
		while (resultSet.next()) {
			transaction = new Transaction();
			transaction.setDateOfTransaction(resultSet.getDate(1));
			transaction.setTransactionType(resultSet.getString(2));
			transaction.setTransactedAmount(resultSet.getDouble(3));
			transaction.setBalance(resultSet.getDouble(4));

			statements.add(transaction);
		}
	}

	private boolean logTransaction(Account viewerAccount, Account transactedAccount, double amount,
			String transactionType) throws CustomException {
		boolean isLoggedSuccessfully = false;
		try (Connection connection = DatabaseConnection.getConnection();
				PreparedStatement preparedStatement = connection.prepareStatement(TRANSACTION_LOG)) {
			preparedStatement.setInt(1, viewerAccount.getUserId());
			preparedStatement.setString(2, viewerAccount.getAccountNumber());
			preparedStatement.setString(3, transactedAccount.getAccountNumber());
			preparedStatement.setString(4, transactionType);
			preparedStatement.setDouble(5, amount);
			preparedStatement.setDouble(6, viewerAccount.getBalance());
			preparedStatement.setTimestamp(7, Timestamp.from(Instant.now()));
			preparedStatement.setString(8, transactionType + " Transaction");
			preparedStatement.setString(9, "Success");

			int rowsAffected = preparedStatement.executeUpdate();

			isLoggedSuccessfully = (rowsAffected > 0);

		} catch (SQLException | ClassNotFoundException e) {
			throw new CustomException("Error While Logging In Transaction", e);
		}
		return isLoggedSuccessfully;
	}
}
