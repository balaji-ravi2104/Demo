package com.banking.controller;

import java.util.List;

import com.banking.dao.TransactionDao;
import com.banking.model.Account;
import com.banking.model.Transaction;
import com.banking.utils.CustomException;
import com.banking.utils.ErrorMessages;
import com.banking.utils.InputValidator;

public class TransactionController {

	private TransactionDao transactionDao;

	public TransactionController(TransactionDao transactionDao) {
		this.transactionDao = transactionDao;
	}

	public boolean depositAmount(Account selectedAccount, double amountToDeposite) throws CustomException {
		InputValidator.isNull(selectedAccount, ErrorMessages.INPUT_NULL_MESSAGE);
		boolean isDepositeSuccess = false;
		try {
			isDepositeSuccess = transactionDao.deposit(selectedAccount, amountToDeposite);
		} catch (Exception e) {
			throw new CustomException("Error while Depositing Money!!", e);
		}
		return isDepositeSuccess;
	}

	public boolean withdrawAmount(Account selectedAccount, double amountToWithdraw) throws CustomException {
		InputValidator.isNull(selectedAccount, ErrorMessages.INPUT_NULL_MESSAGE);
		boolean isWithdrawSuccess = false;
		try {
			isWithdrawSuccess = transactionDao.withdraw(selectedAccount, amountToWithdraw);
		} catch (Exception e) {
			throw new CustomException("Error while Depositing Money!!", e);
		}
		return isWithdrawSuccess;
	}

	public boolean transferWithinBank(Account accountFromTransfer, Account accountToTransfer, double amountToTransfer)
			throws CustomException {
		InputValidator.isNull(accountFromTransfer, ErrorMessages.INPUT_NULL_MESSAGE);
		InputValidator.isNull(accountToTransfer, ErrorMessages.INPUT_NULL_MESSAGE);
		boolean isTransactionSuccess = false;
		try {
			isTransactionSuccess = transactionDao.transferMoneyWithinBank(accountFromTransfer, accountToTransfer,
					amountToTransfer);
		} catch (Exception e) {
			throw new CustomException("Error while Transferring Money!! " + e.getMessage(), e);
		}
		return isTransactionSuccess;
	}

	public boolean transferWithOtherBank(Account accountFromTransfer, String accountNumberToTransfer, double amountToTransferWithOtherBank) throws CustomException {
		InputValidator.isNull(accountFromTransfer, ErrorMessages.INPUT_NULL_MESSAGE);
		InputValidator.isNull(accountNumberToTransfer,ErrorMessages.INPUT_NULL_MESSAGE);
		boolean isTransactionSuccess = false;
		try {
			isTransactionSuccess = transactionDao.transferMoneyWithOtherBank(accountFromTransfer,accountNumberToTransfer,amountToTransferWithOtherBank);
		} catch (Exception e) {
			throw new CustomException("Error while Transferring Money!! " + e.getMessage(), e);
		}
		return isTransactionSuccess;
	}

	public List<Transaction> getStatement(Account account, int numberOfMonths) throws CustomException {
		InputValidator.isNull(account, ErrorMessages.INPUT_NULL_MESSAGE);
		List<Transaction> statement = null;
		try {
			statement = transactionDao.getUsersStatement(account,numberOfMonths);
		}catch (Exception e) {
			throw new CustomException("Error while Getting Transaction!!!",e);
		}
		return statement;
	}

	public List<Transaction> getCustomerTransaction(int userIdToGetTransaction) throws CustomException {
		List<Transaction> transactionHistory = null;
		try {
			
		}catch (Exception e) {
			throw new CustomException("Error while Getting Transaction History!!!",e);
		}
		return null;
	}

}
